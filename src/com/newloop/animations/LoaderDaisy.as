/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.animations {	//	//	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;	import gs.TweenLite;	import com.newloop.util.Iterator;	//	public class LoaderDaisy extends MovieClip {		//		//                               **** DEFINE VARIABLES ****		//		//		private var timer:Timer;		private var daisyPetals_arr:Array;		private var daisyPetals_it:Iterator;		//		//                                    **** CONSTRUCTOR ****		//		public function LoaderDaisy(petalColour:uint = 0xBBBBBB) {			////trace ("com.virginlimitededition.view.gallery.ImageLoader");			//			// store variables locally			this.createDaisy(petalColour);		}		//		//		// -------------------------- PETALS ----------------------------------------------------		//		private function createDaisy(petalColour:uint = 0xBBBBBB):void {			var daisy:MovieClip = new MovieClip();			var petals_arr:Array = [];			var daisySize:Number = 18;			var daisyPetals:Number = 18;			var petalSize:Number = 4;			var petalAlpha:Number = 0;			var radius:Number = daisySize / 2;			var theta:Number = (2 * Math.PI) / daisyPetals;// in Radians			var iLength:uint = daisyPetals;			for (var i:uint = 0; i<iLength; ++i) {				var xPos:Number = Math.sin(i * theta) * radius;				var yPos:Number = Math.cos(i * theta) * radius;				var petal:Sprite = new Sprite();				//				// lines				petal.graphics.lineStyle(2, petalColour);				petal.graphics.moveTo(xPos, yPos);				petal.graphics.lineTo(xPos + (Math.sin(i * theta) * petalSize), yPos + (Math.cos(i * theta) * petalSize));				petal.alpha = petalAlpha;				//				// balls				//petal.graphics.beginFill(petalColour, petalAlpha);				//petal.graphics.drawCircle(xPos, yPos, petalSize / 2);				//				daisy.addChild(petal);				petals_arr.push(petal);			}			this.daisyPetals_arr = petals_arr;			this.daisyPetals_it = new Iterator(petals_arr, true);			this.daisyPetals_it.setCurrent(petals_arr[0]);			this.addChild(daisy);			this.startDaisy();		}		//		private function startDaisy():void {			var timerInterval:Number = 40;			var myTimer:Timer = new Timer(timerInterval);			myTimer.addEventListener(TimerEvent.TIMER, this.timerHandler);			myTimer.start();			this.timer = myTimer;		}		//		private function timerHandler(e:TimerEvent):void {			var fadeSpeed:Number = 1;			var petalAlpha:Number = 0.2;			var petal:Sprite = this.daisyPetals_it.getPrevious();			petal.alpha = 1;			TweenLite.to(petal, fadeSpeed, {alpha:petalAlpha});		}		public function stopDaisy():void {			this.timer.stop();			this.timer = null;		}		// ------------------------------------------------------------------------------------		//		public function destroy():Boolean {			// destroy this and any child clips, or don't			// defaults to not allowing destruction			return false;		}		//		public function debug():void {			//trace('');			//trace('debugging in : ' + this);			//			//trace('             > ');		}		//		//                                    **** PRIVATE FNS ****		//	}}