/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.util{	//	//		//	public class ColourUtilities {		//						public function ColourUtilities() {			//			trace("static functions only in here! - ColourUtilities");					}		//  *****************   MAIN PAGE FUNCTIONS   **************************				public static function getRandomColour():uint{						var valueRange:int = Math.pow(16,6);						var randomValue:uint = Math.floor(Math.random()*valueRange);						return randomValue;		}					}}/*//MovieClip.prototype.randomColour = function() {	var myHexCode = "0x";	myHexCode += String(newMath.randomHex());	myHexCode += String(newMath.randomHex());	myHexCode += String(newMath.randomHex());	myHexCode += String(newMath.randomHex());	myHexCode += String(newMath.randomHex());	myHexCode += String(newMath.randomHex());	return (myHexCode);};ASSetPropFlags(MovieClip.prototype, "randomColour", 7);// MovieClip.prototype.compareColours = function(colour1, colour2, threshold) {	// mc to check if two colours are similar	// we define them as similar if they have a total deviation of less than threshold	// first strip off the 0x at the start	if ((threshold<0) || (String(threshold) == "undefined")) {		var threshold = 6;	}	c1 = String(colour1).substr(2, 6);	c2 = String(colour2).substr(2, 6);	//	var totalDev = 0;	for (var i:uint = 0; i<6; i++) {		n1 = newMath.fromHex(c1.substr(i, 1));		n2 = newMath.fromHex(c2.substr(i, 1));		//		dev = Math.abs(n1-n2);		totalDev += dev;		if (totalDev>=threshold) {			return false;		}	}	return true;};*/