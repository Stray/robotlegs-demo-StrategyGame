/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *   The iterator pattern (based on GoF iterator)      *                      *   allows you to retrieve the next / previous or     *                      *   current item in a series, with option to loop     *                      *   throught the series or simply return false once   *                      *   the final item has been returned                  *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.util{	public class Iterator {		// declare variables		private var current:Number;		public var length:Number;				[ArrayElementType("Object")]		public var data_array:Array;		private var isLooping:Boolean;		// class constructor		public function Iterator(data_array:Array, looping:Boolean = false) {			this.data_array = data_array;			this.isLooping = looping;			this.length = data_array.length;			this.current = -1;		}		//		//  function to retrieve NEXT item in the series		//  returns the first item on first call		//		public function getNext():* {			if (this.current <0) {				this.current = 0;			} else if (this.current>=0) {				//trace("hello");				this.current += 1;				// have we got to the end of the loop?				if (this.current>=this.length) {					if (this.isLooping) {						this.current = 0;					} else {						return false;					}				}			} else {				this.current = 0;			}			//trace("this.current now = "+this.current);			return this.data_array[this.current];		}		//		//  function to retrieve PREVIOUS item in the series		//  returns the last item on first call		//		public function getPrevious():* {			if (this.current>=0) {				this.current -= 1;				// have we got to the end of the loop?				if (this.current<0) {					if (this.isLooping) {						this.current = this.length-1;					} else {						return false;					}				}			} else {				this.current = 0;			}			return this.data_array[this.current];		}		//		//  function to retrieve CURRENT item in the series		//  returns false if getNext or getPrevious has not yet been called		//		public function getCurrent():* {			// trace("getCurrent");			if (this.current>=0) {				return this.data_array[this.current];			} else {				return false;			}		}		//		public function setCurrent(o:*):* {			var iLength:uint = this.length;			for (var i:uint = 0; i<iLength; i++) {				if (this.data_array[i] == o) {					this.current = i;					return i;				}			}			return false;		}		//		public function removeCurrent():* {			if (this.current>=0) {				this.data_array.splice(this.current, 1);				this.length = data_array.length;				return this.getCurrent();			} else {				return false;			}		}		//		public function hasNext():* {			if (this.current <0) {				return true;			}			if (this.current<(this.length-1)) {				return true;			} else {				return this.isLooping;			}		}		//		public function hasPrevious():* {			if (this.current <0) {				return true;			}			if (this.current>0) {				return true;			} else {				return this.isLooping;			}		}		//		//  function to reset to the first item in the series		//		public function reset():void {			this.current = 0;		}		//		public function resetAndClear():void {			this.current= -1;		}				public function resetLast():void{			this.current = this.length-1;		}				public function get currentIndex():uint{			return current as uint;		}	}}